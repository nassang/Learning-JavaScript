# CHAPTER.3 리터럴과 변수, 상수, 데이터 타입
 [변수와 상수] 
  - const : 블록단위/재정의 불가
  - let : 블록단위/재정의 가능
  - var : 스코프단위/남용의 문제/E6부터 const와 let으로 구분
  
  ex)    var         test        =          "test_str";
     (변수or상수)   (식별자)   (값 할당)    (ㅇㅇ형 리터럴)

 [원시타입]
  - 숫자/문자열/불리언/null/undefined/심볼(ES6 추가)
  
  * 숫자는 dubble형식(부동소수점 숫자 형식:실제 숫자의 근사치)
  -> (문제)const a = 0.2;에서 실제 a는 (예를 들어) 0.20000012일 수 있다(조건문등에서 문제 발생)  
  -> (해결)NUMBER객체에 프로퍼티(입실론) a.EPSILON => 0.2를 0.2로 인식하게 
  
  * 이스케이프(\) : 문자열("" 혹은'') 안에서 
  ex) let str = "\"쌍따\", '\작따\', \\(역슬레쉬)";    // "쌍따", '작따', \(역슬레쉬)
  
  * 특수문자(/r) : 캐리지 리턴(앞 공백을 없애고 맨 앞으로 정렬)
  ex) let str = "LINE1\r\n   Line2";   // LINE1
                                          LINE2
  
  * 백틱(`) : 문자열을 좀더 유연하게 사용 가능 / 문자열안에 변수 넣기도 가능 #{strName}
  ex) let str = `New in ES6 \` strings.`;   // New in ES6 ` strings.
  
  * 심볼(Symbol) : 고유식별자 -> 항상 유일한 값을 표현
  ex) const normal1 = "RED";       |     const symbol1 = Symbol("RED");  
      const normal2 = "RED";       |     const symbol1 = Symbol("RED");
      (normal1 == normal2)         |         (symbol1 != symbol1)
 
# CHAPTER.4 제어문
  [제어문]
  - for문 : 범주O/인덱스O
  - while문 : 범주X/인덱스X
  - do-while문 : 무조건 한번은 실행
  - if-else문 : 여러조건 중 택1
  - swith문 : 조건하나로 여러 케이스
  - for in문 : 객체{} 프로퍼티 루프 ex) for(let data in {str:"aa", str2:"bb"})
  - for of문 : 컬랙션 요소 루프(ES6) ex) for(let data of ["aa", "bb", "cc"])
    * for of문은 배열은 물론 iterable객체에 모두 사용가능..?
  - break : 블록을 빠져나옴
  - continue : 현재 블록 스킵

# CHAPTER.5 표현식과 연산자
 [표현식]
 - 명시적인 값이 있는 문
 ex) let x;    //선언문
     x = 3*5;  //표현식

 [연산자]
 - 전위연산 : ++x --x :선 연산, 후 할당
 - 후위연산 : x++ x-- :선 할당, 후 연산 
 
 ex) let x = 2;
     const r1 = x++ + x++;
           r1 = 2 + x++;  //좌측 x에 2를 할당 후 x값 증가(현재x = 3)
           r1 = 2 + 3;    //우측 x에 3을 할당 후 x값 증가(현재x = 4)
           r1 = 5;
           
     const r2 = ++x + ++x;
           r2 = 5 + ++x; //현재 x값(4)에서 증가 후(5) 할당(현재x = 5)
           r2 = 5 + 6;   //현재 x값(5)에서 증가 후(6) 할당(현재x = 6)
           r2 = 11;
           
 - 비교연산 (==)동등/(===)일치
   * 동등연산자 사용 시 (0, null, undefined, "")값 비교는 권장하지 않음
   * 객체는 항상 다름
   ex) const str1 = {name:"test"};
       const str2 = {name:"test"};
             str1 == str2  //false
             str1 === str2 //false
   
   * 자바스크립트의 데이터 형식 : (참 같은 값/거짓 같은 값)
   * 아래 나열한 거짓 같은 값을 제외하면 모두 참 같은 값
     - undefined 
     - null 
     - false 
     - 0 
     - NaN 
     - ''(빈문자열)
     
   * 거짓으로 혼돈할 수 있는 참값
    - value of() 메서드에서 반환하는 false
    - "false"(문자열)
    - " "(공백있는 문자열)
    
 - 단축평가 : 피연산자의 부수효과 기대
   ex) const trueOrFalse = true;
       let x = 0;
       const result1 = trueOrFalse || x++;  //treuOrFalse값이 true이기 떄문에 충족 || 뒤로 연산이 가지 않음
             result1 = trueOrFalse;
             result1 = true;
             
       const trueOrFalse2 = false;
       let y = 0;
       const result2 = trueOrFalse2 || y++;  //treuOrFalse2값이 false 떄문에 불충족 || 뒤로 연산이 감
             result2 = y++;
             result2 = 0;

 - 해체할당 : ES6신규! => 변수이름과 객체의 프로퍼티 이름을 맞추면 분배가능
   ex) const obj = {b:2, c:3, d:4};
       const {a, b, c} = obj;
       //a : obj프로퍼티 중 식별자 a와 일치하는게 없음 -> undefined
       //b : obj프로퍼티 중 식별자 b와 일치 -> 2
       //c : obj프로퍼티 중 식별자 c와 일치 -> 3
       //d : obj프로퍼티 중 식별자 d는 정의되지 않음
    
   *확산연산자(...) : 나머지 요소를 저장
   ex) const arr = [1, 2, 3, 4, 5];
       let [x, y, ...rest] = arr; 
       x;       //배열의 순서대로 1을 할당
       y;       //배열의 순서대로 2를 할당
       rest;    //배열의 나머지 3,4,5를 할당

# CHAPTER.6 함수
- 함수
//함수선언
 function testFunc(data1, data2 = 3, data3){  //함수안에서 사용하는 매개변수(data1, data2)
   return data1 + data2;               //ES6에서 매개변수 기본값 설정이 생김 
                                       //=>data2의 값은 없어도 기본적값 3이 적용되여 연산
 }
 
 //함수 참조(실행안됨)
 let sum = testFunc;
 
 //함수호출(함수 실행됨)
 sum(1,2);     //3
 testFunc(1);  //4(매개변수 기본값 적용)
 
 - 매개변수 : 함수 호출 시 정보를 전달하는 변수
  * 원시값과 객체가 매개변수로 함수에 전달 될 때 일어나는 변화
  ex)
 =============================================================================== 
  [원시값] : 매개변수는 원시값에 영향을 주지 않음
  function test(a){
    //현재 a는 "default";
    a = "change"; //"default"값을 담은 매개변수 a는 "change"로 값 변경 
  }
  let a = "default";
  test(a);
  //a는 여전히 "default" => 원시값은 변하지 않음
 ===============================================================================
 [객체] : 매개변수는 객체에 영향을 줄 수 있음
 function test(a){
   a.str = "change"; //객체를 담은 매개변수의 프로퍼티를 수정하면 외부 객체값이 변경됨
   
   a = {
     str = "newChange" //매개변수에 프로퍼티를 새로 할당하는건 기존 객체에 영향을 주지 않음
   }
   //내부에서 a.str값은 이제 "newChange"가 됨
   
 }
 let a = {str:"default"};
 test(a);
 //a.str 은 "default"가 아니고 "newChange"도 아니고 "change"가 됨
 
 - 화살표 표기법 : 함수를 간단히
 const f1 = function(){return "aa"};
 f1();   //aa
 const f1 = () => "aa";
 f1();   //aa
 
 const f3 = function(data){return `it's ${data}`}
 f3("test");   //it's test
 const f3 = data => `it's ${data}`;
 f3("test");  //it's test

- call / apply / bind
 ========================================================================================================================
 ex)
 [call] : 함수 호출 시 변수를 하나 하나 넘길 수 있음 / 특정값을 this로 지정 가능
  const fruit_1 = {name:"apple"};
  const fruit_2 = {name:"banana"};
  
  function intro(someFruit){
	  return `This is ${this.name} and ${someFruit.name} `;  //this와 test 즉, 해당 펑션은 실제로 변수 2개를 받음
  }
  
  intro.call(fruit_1, fruit_2); //This is apple and banana : 객체fruit_1은 this값으로 지정 , 객체fruit_2는 someFruit이 된다
  intro.call(fruit_1);          //error : 객체fruit_1은 this값으로 지정되나 someFruit이 값이 없다
  ========================================================================================================================
  [apply] : 함수 호출 시 배열을 넘김
  intro.apply(fruit_1,[fruit_2]); //This is apple and banana
  intro.apply(fruit_1);           //error
  intro.apply(fruit_1,[]);        //error
  intro.apply(fruit_1,[""]);      //This is apple and undefined
  ========================================================================================================================
  [bind] : 어떻게 호출 되더라도 this값을 바인딩 시켜 고정되게 할 수 있음(바인딩값 고정 그외 값은 변경가능)
  function bindIntro(){
   return "This is ${name}"
  }
  const appleIntro = bindIntro.bind(fruit_1);
  const bananaIntro = bindIntro.bind(fruit_2);
  appleIntro();             //This is apple(고정)
  bananaIntro();            //This is banana(고정)
  
# CHAPTER.7 스코프  
 [스코프] : 변수, 상수, 매개변수가 특정 범위안에 존재
  - 전역스코프 : 모든 스코프에 적용(상위)
  - 블록스코프 : 특정 블록({})에만 적용
  - 클로저 : 함수가 필요한 스코프에 접근할 수 있도록 의도적으로 정의
    ex) let func;
        {
          func = function(){
           alert("스코프 내부 펑션이 바깥에 접근 가능!");
          }
        }
        func();
  - 호이스팅 : 일반적으로 사용하던 변수 혹은 상수(var)에서 적용되는 현상
    => 선언되지 않은 변수를 적어도 에러가 나지 않게 함
    ex)
    (호이스팅 o)
    x;               // x를 var x로 정의 undefined(변수를 밑에서 위로 끌어 올림)
    var x = "test";  // x에 "test"할당
    
    (호이스팅 x)
    y;              //정의되지 않은 y로 오류 발생 
    let y = "test"; 
  - 스트릭트 모드 : "use strict" : 프로그램상에서 발생할 수 있는 암시적 전역 변수 배제/오직 해당 스코프 내용만 봄  
    
   

  


