# CHAPTER.3 리터럴과 변수, 상수, 데이터 타입
 [변수와 상수] 
  - const : 블록단위/재정의 불가
  - let : 블록단위/재정의 가능
  - var : 스코프단위/남용의 문제/E6부터 const와 let으로 구분
  
  ex)    var         test        =          "test_str";
     (변수or상수)   (식별자)   (값 할당)    (ㅇㅇ형 리터럴)

 [원시타입]
  - 숫자/문자열/불리언/null/undefined/심볼(ES6 추가)
  
  * 숫자는 dubble형식(부동소수점 숫자 형식:실제 숫자의 근사치)
  -> (문제)const a = 0.2;에서 실제 a는 (예를 들어) 0.20000012일 수 있다(조건문등에서 문제 발생)  
  -> (해결)NUMBER객체에 프로퍼티(입실론) a.EPSILON => 0.2를 0.2로 인식하게 
  
  * 이스케이프(\) : 문자열("" 혹은'') 안에서 
  ex) let str = "\"쌍따\", '\작따\', \\(역슬레쉬)";    // "쌍따", '작따', \(역슬레쉬)
  
  * 특수문자(/r) : 캐리지 리턴(앞 공백을 없애고 맨 앞으로 정렬)
  ex) let str = "LINE1\r\n   Line2";   // LINE1
                                          LINE2
  
  * 백틱(`) : 이스케이프 없이 사용가능
  ex) let str = `New in ES6 \` strings.`;   // New in ES6 ` strings.
  
  * 심볼(Symbol) : 고유식별자 -> 항상 유일한 값을 표현
  ex) const normal1 = "RED";       |     const symbol1 = Symbol("RED");  
      const normal2 = "RED";       |     const symbol1 = Symbol("RED");
      (normal1 == normal2)         |         (symbol1 != symbol1)
 
 # CHAPTER.4 제어문
  [제어문]
  - for문 : 범주O/인덱스O
  - while문 : 범주X/인덱스X
  - do-while문 : 무조건 한번은 실행
  - if-else문 : 여러조건 중 택1
  - swith문 : 조건하나로 여러 케이스
  - for in문 : 객체{} 프로퍼티 루프 ex) for(let data in {str:"aa", str2:"bb"})
  - for of문 : 컬랙션 요소 루프(ES6) ex) for(let data of ["aa", "bb", "cc"])
   * for of문은 배열은 물론 iterable객체에 모두 사용가능..?
  - break : 블록을 빠져나옴
  - continue : 현재 블록 스킵
